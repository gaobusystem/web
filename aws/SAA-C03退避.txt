+++++++++++++++++++++++++++++++++++
クラウド　デプロイモデル
++++++++++++++++++++++++++++++++++
〇プライベートクラウド 自社内にクラウド基盤を構築し、ハードウェア・ソフトウェアを事業部や子会社間で共有利用
〇コミュニティクラウド 特定のコミュニティ（特定の業種等）に属する利用者と共用利用するために構築されたクラウド環境
〇パブリッククラウド 　世界中の不特定多数の利用者が共有する形態のクラウド環境　AWSはこのモデル
〇ハイブリットクラウド 複数の異なる実装モデル同士を組み合わせたクラウド環境
〇オンプレミス 　　　　ハードウェア･ソフトウェアを全て自前で購入し、自社にデータセンターやシステムを構築

+++++++++++++++++++++++++++++++++++
AWSのサービスへのアクセス
++++++++++++++++++++++++++++++++++
〇・AWSマネジメントコンソール
〇・ソフトウエア開発キット（SDK）
〇・AWS Ｃommand Line Intertface(AWS CLI)

+++++++++++++++++++++++++++++++++++
一般的な設計原則
++++++++++++++++++++++++++++++++++

☆キャッパシテイニーズの推測が不要

☆本稼働スケールでシステムをテストする

☆自動化によってアーキテクチャでの実験が容易に

〇Well-Architected Framework
〇 AWSが提唱するクラウド設計・運用のベストプラクティス集です。
 「一般的な設計原則」と、6本の柱である「信頼性」「セキュリティ」「パフォーマンス効率」「コスト最適化」「運用上の優秀性」
 「持続可能性」があります。
〇 ・発展するアーキテクチャが可能に
〇     顧客へのサービスを停止せずにテストできるため、設定変更やバージョンアップによって発生するリスクを軽減し、
〇     システムを常に進化させることができます。
〇 ・データに基づいてアーキテクチャを進化させる
〇     各リソースのメトリクス（システムのパフォーマンスに関するデータ）を自動的に収集させることにより、
〇     収集したデータに基づいてシステムの改善ができます。
〇 ・ゲームデーを利用して改善する
〇     本番環境のイベントをシミュレート（ゲームデー）することで、改善箇所の発見やイベントに対応する運用者の経験を積むことができます。

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Well-Architected Frameworkの「パフォーマンス効率」を実現するための設計
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇「パフォーマンス効率」の設計原則の一つは、「サーバーレスアーキテクチャを使用する」です。
〇サーバーの運用や管理を意識することなくサービスを展開できます。
〇例えば、S3の静的Webサイトホスティング機能ではWebサーバーの運用や管理をしなくても、S3に保存している静的コンテンツを
〇Webサイトとして公開できます。

〇「パフォーマンス効率」の設計原則の一つは、「より頻繁に実験する」です。
〇異なるタイプのサーバーやストレージ、設定を使用した比較テストをより頻繁に実施します。
〇例えば、EC2インスタンスのインスタンスタイプはサーバー構築後でも容易に変更ができるので、インスタンスタイプごとの負荷状況を定期的に比較し、
〇もっとも適切なインスタンスタイプを選択できます。
〇パフォーマンス効率の設計原則は以下の5つです。
〇・高度な技術を誰でも使えるようにする … 高度な技術の知識とサービスをクラウドが提供することにより、
〇　オンプレミスでは実装が難しい技術であっても容易に利用できます。
〇・数分でグローバルに展開する … 世界各地にある複数のAWSリージョン経由で、世界中から低遅延でサービスへアクセスできます。
〇・サーバーレスアーキテクチャを使用する … サーバーの運用や管理を意識することなくサービスを展開できます。
〇・より頻繁に実験する … 異なるタイプのサーバーやストレージ、設定を使用した比較テストをより頻繁に実施します。
〇・システムに対する精通の程度を考慮する … クラウドサービスの技術を理解し、実現したいシステムを最適な技術で実装します。
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Well-Architected Frameworkの「コスト最適化」を実現するための設計
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇「コスト最適化」の設計原則の一つは、「付加価値を生まない高負荷の作業に費用をかけない」です。
〇データーセンターやサーバーの管理・運用など高負荷の作業はAWSで実施するため、インフラの整備よりも開発業務や顧客対応に集中できます。
〇例えば、Elastic Beanstalkを利用するとアプリケーションが動作する環境を自動で構築できるので、
〇インフラを意識することなくアプリケーションの開発に集中できます。
〇コスト最適化の設計原則は以下の5つです。
〇・クラウド財務管理を実践する … リソースの使用量とクラウドに支払う費用を把握し、組織全体でコスト意識を高めます。
〇・消費モデルを導入する … 未使用のリソースは停止し、必要最小限のリソース費用のみ支払います。
〇・全体的な効率を測定する … AWSリソースの使用量とそれに対する費用を把握することにより、コストパフォーマンスを向上しやすくなります。
〇・付加価値を生まない高負荷の作業に費用をかけない … データーセンターやサーバーの管理・運用など高負荷の作業はAWSで実施するため、
〇インフラの整備よりも開発業務や顧客対応に集中できます。
〇・費用を分析し、帰結させる … システムの利用状況と費用からコストパフォーマンスを測定することで、リソースの最適化とコスト削減の
〇機会を得られます。AWSを利用したシステムで得られた利益に対して、AWSに支払った費用が適切かを分析し、コスト最適化を目指します。
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Well-Architected Frameworkの「信頼性」を実現するための設計
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
「信頼性」の設計原則の一つは、「障害から自動的に復旧する」です。
〇リアルタイムでのパフォーマンスの監視と、しきい値を超過した場合の復旧プロセスを自動化することにより、障害からいち早く復旧できます。
〇例えば、ELBによる負荷分散とAuto Scalingによる自動スケーリングを利用することにより、定期的なヘルスチェックにて一定時間応答がなくなったリソースは
〇ELBの負荷分散先から切り離し、Auto Scalingで起動した新しいインスタンスをELBの負荷分散先に追加して障害から自動復旧できます。
〇信頼性の設計原則は以下の5つです。
〇・障害から自動的に復旧する … リアルタイムでのパフォーマンスの監視と、しきい値を超過した場合の復旧プロセスを自動化することにより、障害からいち早く復旧できます。
〇・復旧手順をテストする … 障害発生と対応する復旧手順のテストをすることにより、実際の障害が発生する前に復旧手順の確認や改善ができます。
〇・水平方向にスケールしてシステム全体の可用性を高める … 1つの大規模なリソースを複数の小規模なリソースに置き換えることにより、単一の障害がシステム全体に与える
〇　　　　　　　　　　　　　　　　　　　　　　　　　　　　影響を軽減できます。
〇・キャパシティーを推測しない … システムの使用率を監視してリソースの追加や削除を自動化することにより、需要に対して常に適切なキャパシティーで運用できます。
〇・自動化で変更を管理する … AWSリソースの増減やアプリケーションのデプロイ、セキュリティパッチ適用などの変更は自動化して実行し、変更した内容を管理します。

〇「信頼性」の設計原則の一つは、「キャパシティーを推測しない」です。
〇システムの使用率を監視してリソースの追加や削除を自動化することにより、需要に対して常に適切なキャパシティーで運用できます。
〇例えば、EC2インスタンスで空きメモリが不足してパフォーマンスに問題が発生しても、インスタンスタイプを一つ上のクラスに変更することで
〇簡単にスケールアップが実現できるので、サービス開始当初は予算に応じたサイズから開始し、▲需要に応じてスケールアップする前提で設計します。

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Amazon EC2 Auto Scaling
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇EC2 Auto Scalingには以下の設定が必要

〇[起動テンプレート作成 ]<>
〇起動するEC2のAMIやインスタンスタイプ、ストレージ、セキュリティグループ等を定義したもの。


〇[Auto Scaling グループ ]
〇スケーリングに関する全般設定を定義した論理的な単位。
〇・起動テンプレート選択
〇・EC2インスタンスの起動設定
〇・EC2インスタンスを設置するVPCやサブネット
〇・EC2インスタンスの最小数・最大数・希望数
〇・スケーリングポリシー
〇・ヘルスチェック
〇・通知方法等
〇・ウォームアップ設定

[スケーリングポリシー]
どのような条件でEC2インスタンスを増減させるかを定義したもの。
・ターゲット追跡スケーリングポリシー
・予測スケーリングポリシー
・手動スケーリング
・スケジュールに基づくスケーリング


+++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇12.1 スケーリング
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇スケールアップ（スケールダウン）
〇　処理能力を増強
〇　機器停止
〇　一時的にダウンタイム発生＝垂直スケーリング

〇スケールアウト・スケールイン

〇　　サーバ台数を増やして、処理能力を高める
〇　　サーバ間の同期処理＝水平スケーリング

+++++++++++++++++++++++++++++++++++++++++++++++++++++++
12.5 高可用性と耐障害性
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
〇高可用性（ハイアベイラリティ）
〇　障害時に停止時間をどれだけ短縮できるか
〇　複数のAzにEC2を配置

〇耐障害性（フォールトトレランス）
〇　障害時にシステムのパフォマンスを落とすことなく、システムを稼働し続けられる能力

〇SLA維持する分、耐障害性の方が多くコストが発生する
